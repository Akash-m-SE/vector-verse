// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  name      String? 
  email     String   @unique
  image     String?
  provider  String? @unique
  providerId String?  @unique

  projects Project[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

enum ProjectStatus {
  CREATING
  CREATED
  FAILED
}

model Project {
  id         Int  @id @default(autoincrement())
  title String 
  description String 
  pdfUrl String //URL of the file uploaded in aws s3 bucket
  status ProjectStatus
  
  userId Int
  user User @relation(fields: [userId], references: [id])

  vectorEmbeddings VectorEmbedding[]

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VectorEmbedding {
  id Int @id @default(autoincrement())
  embedding Float[]

  projectId Int
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  AI
}

model Message {
  id Int @id @default(autoincrement())
  content String
  role Role
  
  userId Int
  user User @relation(fields: [userId], references: [id])

  projectId Int
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}